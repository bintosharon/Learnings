Jenkins Initial admin password
e670934bdac246428a093e424ea051bb

tar -xvzf <maven zipped file>				# to extract zipped files


cd ~							#to go to root home directory

ll -a							#view all files, including hidden


							#in bash_profile
M2_Home
M2
JAVA_HOME = find / -name jvm

source .bash_profile					#the changes will apply on restart so instead of that we are loading only the bash profile file


clean install						#maven goal


Tomcat with Jenkins: 

Plugins: deploy to container

manage jenkins-> add credentials



Cron JOB:
* * * * *


docker:

yum install docker -y
service docker status
service docker start

docker images
docker ps
docker ps -a
docker --help

hub.docker.com #for all images, We can search for flask images too.

docker pull tomcat

#init 6 to restart ec2 instance

docker run -d --name tomcat-container -p 8081:8080 tomcat
					externally expose:internally run
docker exec -it <container id or container name> /bin/bash

cp -R * ../webapps/


Dockerfile

FROM: to pull the base image
RUN: To execute commands
CMD: To provide defaults of executing container - execute at docker execution
ENTRYPOINT: To configure a container that will run as executable- cannot be overwritten, like CMD
WORKDIR: To set the working directory - like cd command
COPY: copy directory from local machine to docker container
ADD: copy files and folders from local machine to docker container - we can also use this like wget command
EXPOSE:  informs docker that container listens on the specified network ports
ENV:

see dockerfile instuctions 

from run cMD copy workdir entrypoint aDD expose

docker build -t mytomcat .


cat /etc/passwd 	# to know what are the users are there
useradd dockeradmin 	#add a admin user
passwd dockeradmin	# to set a password 31bkst
id dockeradmin 		# to see what group, 
cat /etc/group		# to see group
usermod -aG docker dockeradmin	# to create a group and add that user
vi /etc/ssh/sshd_config	#for ec2 instances, enabling password
/Password 		#in Vi editor
service sshd reload	#reload services
publish over ssh 	#send artificat thru ssh

sudo su - dockeradmin	#login as dockeradmin
ssh-keygen
cd /home/dockeradmin/.ssh



chown -R dockeradmin:dockeradmin docker
COPY ./*.war /usr/local/tomcat/webapps

exec: 
cd /opt/docker;
docker build -t regapp:v1 .;
docker run -d --name registerapp -p 8086:8080 regapp:v1



docker image prune -a
docker container prune


Ansible

useradd ansadmin
passwd ansadmin

vi /etc/ssh/sshd_config
password auth yes

service sshd reload

ssh-keygen

yum install ansible
python --version

vi sudo
copy all-all Nopasswd:all 	#shift G


ansible --version


vi /etc/ansible/hosts  #default inventory file

ifconfig of docker host
ssh-copy-id <private ip>
ll-la


ansible all -m ping
ansible all -m command -a uptime

sudo chown ansadmin:ansadmin docker

cat /etc/group

usermod -aG docker ansadmin
id ansadmin

chmod 777 <file>

ansible-playbook localhost

[dockerhost]
172.88.88
[ansible]
876876

vi regapp.yml
---
- hosts: ansible
  tasks:
  - name: create a docker image
    command: docker build -t regapp:latest .  #-f for path
    args:
      chdir: /opt/docker
ansible-playbook regapp.yml --check








docker hub

docker login
docker push <image name>

docker images

docker tag <imageid> binto/<imagename>
docker push binto/imagename

ansible-playbook regapp.yml --limit <ipaddress localhost>


chmod 777 /directory which violates

ignore_errors: yes
if we have this container then stop it, if not, dont fail the play book


---------------------------------------------------------------------------
Kubernetes

create a ec2 instance and check version

aws --version

chmod +x kubectl
mv kubectl /usr/local/bin
echo $PATH


kubectl get nodes

kubectl run webapp --image=httpd
kubectl get all
kubectl get po


eksctl create cluster --name bintocluster  \
--region ap-northeast-1 \
--node-type t2.micro \
--nodes-min 2 \
--nodes-max 2 \ 
--zones <AZ-1>,<AZ-2>
eksctl delete cluster bintocluster--region ap-northeast-1


example:
eksctl create cluster --name valaxy-cluster \
   --region ap-south-1 \
--node-type t2.small \

kubectl create deployment demo-ngnix --image=nginx --replicas=2 --port=80

kubectl get deployment

kubectl get replicaset

kubectl get pod
kubectl get all

kubectl expose deployment demo-nginx --port=80 --type=LoadBalancer

vi pod.yml

kubernetes api documentation

pod manifest file in kubernetes

apiVersion: v1
kind: Pod
metadate:
  name: demo-pod
  labels:
    app: demo-app
spec:
  containers: 
    -name: demo-nginx
     image: nginx
     ports:
       -name: demo-nginx
        containerPort: 80

service manifest file kubernetes

apiVersion: v1
kind: Service
metadata:
  name: demoservice
spec:
  ports:
  - name: nginx-port
    port: 80                 #exposing on port 80
    targetPort: 80           #container 80
  type: LoadBalancer

kubectl apply -f pod.yml

